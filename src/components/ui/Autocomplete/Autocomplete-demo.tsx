'use client';

import React, { useState } from 'react';
import { Autocomplete } from './index';
import type { AutocompleteItem } from './types';

export default function AutocompleteDemo() {
  const [selectedItem, setSelectedItem] = useState<AutocompleteItem | null>(null);
  const [searchQuery, setSearchQuery] = useState('');

  const handleSelect = (item: AutocompleteItem) => {
    setSelectedItem(item);
    console.log('Selected item:', item);
  };

  const handleSearch = (query: string) => {
    setSearchQuery(query);
    console.log('Search query:', query);
  };

  return (
    <div className="p-8 max-w-2xl mx-auto space-y-6">
      <div className="text-center">
        <h1 className="text-3xl font-bold text-slate-800 mb-2">
          –ê–≤—Ç–æ–∫–æ–º–ø–ª–∏—Ç –î–µ–º–æ
        </h1>
        <p className="text-slate-600">
          –ü–æ–∏—Å–∫ –º–µ—Å—Ç –¥–ª—è –¥–∞–π–≤–∏–Ω–≥–∞, —Å—Ç—Ä–∞–Ω, —Ä–µ–≥–∏–æ–Ω–æ–≤ –∏ –ª–æ–∫–∞—Ü–∏–π
        </p>
      </div>

      <div className="space-y-4">
        <Autocomplete
          placeholder="–ù–∞—á–Ω–∏—Ç–µ –≤–≤–æ–¥–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—Ç–∞, —Å—Ç—Ä–∞–Ω—ã –∏–ª–∏ —Ä–µ–≥–∏–æ–Ω–∞..."
          onSelect={handleSelect}
          onSearch={handleSearch}
          className="w-full"
        />

        {/* Selected Item Display */}
        {selectedItem && (
          <div className="mt-6 p-4 bg-gradient-to-r from-tropical-blue/5 to-deep-ocean/5 rounded-2xl border border-slate-200">
            <h3 className="font-semibold text-slate-800 mb-2">–í—ã–±—Ä–∞–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç:</h3>
            <div className="space-y-2">
              <div className="flex items-center gap-2">
                <span className="text-lg">{getTypeIcon(selectedItem.type)}</span>
                <span className="font-medium text-slate-800">{selectedItem.name}</span>
                <span className="text-xs text-slate-500 bg-slate-100 px-2 py-1 rounded-full">
                  {getTypeLabel(selectedItem.type)}
                </span>
              </div>
              {selectedItem.subtitle && (
                <div className="text-sm text-slate-600">{selectedItem.subtitle}</div>
              )}
              {selectedItem.metadata && Object.keys(selectedItem.metadata).length > 0 && (
                <div className="text-xs text-slate-500">
                  <pre className="bg-slate-100 p-2 rounded overflow-auto">
                    {JSON.stringify(selectedItem.metadata, null, 2)}
                  </pre>
                </div>
              )}
            </div>
          </div>
        )}

        {/* Search Query Display */}
        {searchQuery && (
          <div className="mt-4 p-3 bg-slate-50 rounded-lg">
            <span className="text-sm text-slate-600">
              –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å: <span className="font-medium">{searchQuery}</span>
            </span>
          </div>
        )}
      </div>

      {/* Instructions */}
      <div className="mt-8 p-4 bg-blue-50 rounded-lg">
        <h3 className="font-semibold text-blue-800 mb-2">–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:</h3>
        <ul className="text-sm text-blue-700 space-y-1">
          <li>‚Ä¢ –ù–∞—á–Ω–∏—Ç–µ –≤–≤–æ–¥–∏—Ç—å —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ (–º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞)</li>
          <li>‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Ç—Ä–µ–ª–∫–∏ ‚Üë‚Üì –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º</li>
          <li>‚Ä¢ –ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—ã–±–æ—Ä–∞ —ç–ª–µ–º–µ–Ω—Ç–∞</li>
          <li>‚Ä¢ –ù–∞–∂–º–∏—Ç–µ Escape –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ —Å–ø–∏—Å–∫–∞</li>
          <li>‚Ä¢ –ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è –≤—ã–±–æ—Ä–∞</li>
        </ul>
      </div>
    </div>
  );
}

const getTypeIcon = (type: AutocompleteItem['type']) => {
  switch (type) {
    case 'site':
      return 'üèä‚Äç‚ôÇÔ∏è';
    case 'country':
      return 'üåç';
    case 'region':
      return 'üó∫Ô∏è';
    case 'location':
      return 'üìç';
    default:
      return 'üîç';
  }
};

const getTypeLabel = (type: AutocompleteItem['type']) => {
  switch (type) {
    case 'site':
      return '–ú–µ—Å—Ç–æ –¥–ª—è –¥–∞–π–≤–∏–Ω–≥–∞';
    case 'country':
      return '–°—Ç—Ä–∞–Ω–∞';
    case 'region':
      return '–†–µ–≥–∏–æ–Ω';
    case 'location':
      return '–õ–æ–∫–∞—Ü–∏—è';
    default:
      return '–†–µ–∑—É–ª—å—Ç–∞—Ç';
  }
};
