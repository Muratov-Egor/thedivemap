import React from 'react';
import { render, screen, fireEvent, waitFor, act } from '@testing-library/react';
import '@testing-library/jest-dom';
import Autocomplete from '../Autocomplete';

// –ú–æ–∫–∞–µ–º fetch
global.fetch = jest.fn();

const mockFetch = fetch as jest.MockedFunction<typeof fetch>;

// –ú–æ–∫–∞–µ–º i18next
jest.mock('react-i18next', () => ({
  useTranslation: () => ({
    t: (key: string) => {
      const translations: Record<string, string> = {
        placeholder: '–ü–æ–∏—Å–∫ –º–µ—Å—Ç –¥–ª—è –¥–∞–π–≤–∏–Ω–≥–∞...',
        searchLabel: '–ü–æ–∏—Å–∫',
        clearButton: '–û—á–∏—Å—Ç–∏—Ç—å',
        'errors.searchFailed': '–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞',
        'types.site': '–°–∞–π—Ç',
        'types.country': '–°—Ç—Ä–∞–Ω–∞',
        'types.region': '–†–µ–≥–∏–æ–Ω',
        'types.location': '–õ–æ–∫–∞—Ü–∏—è',
        loading: '–ó–∞–≥—Ä—É–∑–∫–∞...',
        resultsLabel: '–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞',
        resultsCount: '–ù–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤',
      };
      return translations[key] || key;
    },
  }),
}));

// –ú–æ–∫–∞–µ–º utils
jest.mock('@/lib/utils', () => ({
  cn: (...classes: (string | undefined | null | false)[]) => classes.filter(Boolean).join(' '),
  getCountryFlag: (isoCode: string) => {
    const flags: Record<string, string> = {
      TC: 'üáπüá®',
      TH: 'üáπüá≠',
    };
    return flags[isoCode] || 'üåç';
  },
}));

const mockApiResponse = {
  sites: [
    {
      id: 1,
      name: 'Test Site',
      country: { name: 'Test Country', region: { name: 'Test Region' } },
      site_type: { label: 'Reef' },
      site_locations: [{ location: { name: 'Test Location' } }],
    },
  ],
  countries: [{ id: 2, name: 'Test Country', iso_code: 'TC' }],
  regions: [{ id: 3, name: 'Test Region' }],
  locations: [{ id: 4, name: 'Test Location', country_id: 2, region_id: 3 }],
  errors: { countries: null, regions: null, locations: null },
};

describe('Autocomplete Integration Tests', () => {
  beforeEach(() => {
    mockFetch.mockClear();
    jest.useFakeTimers();
  });

  afterEach(() => {
    jest.useRealTimers();
  });

  it('–ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª –ø–æ–∏—Å–∫–∞ –∏ –≤—ã–±–æ—Ä–∞ —ç–ª–µ–º–µ–Ω—Ç–∞', async () => {
    mockFetch.mockResolvedValueOnce({
      ok: true,
      json: async () => mockApiResponse,
    } as Response);

    const onSelect = jest.fn();
    const onSearch = jest.fn();

    render(<Autocomplete onSelect={onSelect} onSearch={onSearch} />);

    const input = screen.getByTestId('autocomplete-input');

    // –í–≤–æ–¥–∏–º —Ç–µ–∫—Å—Ç
    fireEvent.change(input, { target: { value: 'test' } });
    expect(onSearch).toHaveBeenCalledWith('test');

    // –ñ–¥–µ–º debounce –∏ API –æ—Ç–≤–µ—Ç
    act(() => {
      jest.advanceTimersByTime(300);
    });

    await waitFor(() => {
      expect(mockFetch).toHaveBeenCalledWith(
        expect.stringContaining('/api/places?q=test&lang=ru'),
        expect.any(Object),
      );
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è
    await waitFor(() => {
      expect(screen.getByTestId('autocomplete-list')).toBeInTheDocument();
    });

    // –í—ã–±–∏—Ä–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç
    const firstItem = screen.getAllByTestId('autocomplete-item')[0];
    fireEvent.click(firstItem);

    expect(onSelect).toHaveBeenCalledWith(
      expect.objectContaining({
        id: 1,
        name: 'Test Site',
        type: 'site',
      }),
    );
  });

  it('–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫—É API –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ', async () => {
    // –°–Ω–∞—á–∞–ª–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É
    mockFetch.mockRejectedValueOnce(new Error('Network error'));

    const onSelect = jest.fn();
    render(<Autocomplete onSelect={onSelect} />);

    const input = screen.getByTestId('autocomplete-input');
    fireEvent.change(input, { target: { value: 'test' } });

    act(() => {
      jest.advanceTimersByTime(300);
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—à–∏–±–∫–∏
    await waitFor(() => {
      expect(screen.getByTestId('autocomplete-error-message')).toBeInTheDocument();
      expect(screen.getByText('Network error')).toBeInTheDocument();
    });

    // –û—á–∏—â–∞–µ–º –∏ –ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞
    const clearButton = screen.getByTestId('autocomplete-clear-button');
    fireEvent.click(clearButton);

    // –¢–µ–ø–µ—Ä—å –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
    mockFetch.mockResolvedValueOnce({
      ok: true,
      json: async () => mockApiResponse,
    } as Response);

    fireEvent.change(input, { target: { value: 'test2' } });

    act(() => {
      jest.advanceTimersByTime(300);
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—à–∏–±–∫–∞ –∏—Å—á–µ–∑–ª–∞ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è
    await waitFor(() => {
      expect(screen.queryByTestId('autocomplete-error-message')).not.toBeInTheDocument();
      expect(screen.getByTestId('autocomplete-list')).toBeInTheDocument();
    });
  });

  it('–∫–ª–∞–≤–∏–∞—Ç—É—Ä–Ω–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ', async () => {
    mockFetch.mockResolvedValueOnce({
      ok: true,
      json: async () => mockApiResponse,
    } as Response);

    render(<Autocomplete />);

    const input = screen.getByTestId('autocomplete-input');

    // –í–≤–æ–¥–∏–º —Ç–µ–∫—Å—Ç –∏ –∂–¥–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    fireEvent.change(input, { target: { value: 'test' } });

    act(() => {
      jest.advanceTimersByTime(300);
    });

    await waitFor(() => {
      expect(screen.getByTestId('autocomplete-list')).toBeInTheDocument();
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç–ª–µ–º–µ–Ω—Ç—ã –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è
    const items = screen.getAllByTestId('autocomplete-item');
    expect(items).toHaveLength(4);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ –≤—ã–±—Ä–∞–Ω
    expect(items[0]).toHaveAttribute('aria-selected', 'true');
  });

  it('–≤—ã–±–æ—Ä —ç–ª–µ–º–µ–Ω—Ç–∞ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã', async () => {
    mockFetch.mockResolvedValueOnce({
      ok: true,
      json: async () => mockApiResponse,
    } as Response);

    const onSelect = jest.fn();
    render(<Autocomplete onSelect={onSelect} />);

    const input = screen.getByTestId('autocomplete-input');

    // –í–≤–æ–¥–∏–º —Ç–µ–∫—Å—Ç –∏ –∂–¥–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    fireEvent.change(input, { target: { value: 'test' } });

    act(() => {
      jest.advanceTimersByTime(300);
    });

    await waitFor(() => {
      expect(screen.getByTestId('autocomplete-list')).toBeInTheDocument();
    });

    // –í—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç
    fireEvent.keyDown(input, { key: 'ArrowDown' });
    fireEvent.keyDown(input, { key: 'Enter' });

    expect(onSelect).toHaveBeenCalledWith(
      expect.objectContaining({
        id: expect.any(Number),
        name: expect.any(String),
        type: expect.any(String),
      }),
    );
  });

  it('–∑–∞–∫—Ä—ã—Ç–∏–µ dropdown —Å Escape', async () => {
    mockFetch.mockResolvedValueOnce({
      ok: true,
      json: async () => mockApiResponse,
    } as Response);

    render(<Autocomplete />);

    const input = screen.getByTestId('autocomplete-input');

    // –í–≤–æ–¥–∏–º —Ç–µ–∫—Å—Ç –∏ –∂–¥–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    fireEvent.change(input, { target: { value: 'test' } });

    act(() => {
      jest.advanceTimersByTime(300);
    });

    await waitFor(() => {
      expect(screen.getByTestId('autocomplete-list')).toBeInTheDocument();
    });

    // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å Escape
    fireEvent.keyDown(input, { key: 'Escape' });

    expect(screen.queryByTestId('autocomplete-list')).not.toBeInTheDocument();
  });

  it('–∫–ª–∏–∫ –≤–Ω–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç dropdown', async () => {
    mockFetch.mockResolvedValueOnce({
      ok: true,
      json: async () => mockApiResponse,
    } as Response);

    render(<Autocomplete />);

    const input = screen.getByTestId('autocomplete-input');

    // –í–≤–æ–¥–∏–º —Ç–µ–∫—Å—Ç –∏ –∂–¥–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    fireEvent.change(input, { target: { value: 'test' } });

    act(() => {
      jest.advanceTimersByTime(300);
    });

    await waitFor(() => {
      expect(screen.getByTestId('autocomplete-list')).toBeInTheDocument();
    });

    // –ö–ª–∏–∫–∞–µ–º –≤–Ω–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    fireEvent.mouseDown(document.body);

    expect(screen.queryByTestId('autocomplete-list')).not.toBeInTheDocument();
  });

  it('–æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∏–∫–æ–Ω–∫–∞–º–∏', async () => {
    mockFetch.mockResolvedValueOnce({
      ok: true,
      json: async () => mockApiResponse,
    } as Response);

    render(<Autocomplete />);

    const input = screen.getByTestId('autocomplete-input');
    fireEvent.change(input, { target: { value: 'test' } });

    act(() => {
      jest.advanceTimersByTime(300);
    });

    await waitFor(() => {
      expect(screen.getByTestId('autocomplete-list')).toBeInTheDocument();
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ —Ç–∏–ø—ã –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è
    expect(screen.getByText('Test Site')).toBeInTheDocument(); // site
    expect(screen.getByText('Test Country')).toBeInTheDocument(); // country
    expect(screen.getByText('Test Region')).toBeInTheDocument(); // region
    expect(screen.getByText('Test Location')).toBeInTheDocument(); // location
  });

  it('–ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏', async () => {
    // –ú–æ–∫–∞–µ–º –º–µ–¥–ª–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
    mockFetch.mockImplementationOnce(
      () =>
        new Promise((resolve) =>
          setTimeout(
            () =>
              resolve({
                ok: true,
                json: async () => mockApiResponse,
              } as Response),
            1000,
          ),
        ),
    );

    render(<Autocomplete />);

    const input = screen.getByTestId('autocomplete-input');
    fireEvent.change(input, { target: { value: 'test' } });

    act(() => {
      jest.advanceTimersByTime(300);
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
    await waitFor(() => {
      expect(screen.getByTestId('autocomplete-loading')).toBeInTheDocument();
    });

    // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞
    act(() => {
      jest.advanceTimersByTime(1000);
    });

    await waitFor(() => {
      expect(screen.queryByTestId('autocomplete-loading')).not.toBeInTheDocument();
      expect(screen.getByTestId('autocomplete-list')).toBeInTheDocument();
    });
  });

  it('–æ—Ç–º–µ–Ω—è–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∑–∞–ø—Ä–æ—Å –ø—Ä–∏ –Ω–æ–≤–æ–º –ø–æ–∏—Å–∫–µ', async () => {
    const abortSpy = jest.spyOn(AbortController.prototype, 'abort');

    // –ú–æ–∫–∞–µ–º fetch —á—Ç–æ–±—ã –æ–Ω –Ω–µ –∑–∞–≤–µ—Ä—à–∞–ª—Å—è —Å—Ä–∞–∑—É
    mockFetch.mockImplementation(
      () => new Promise(() => {}), // –ù–∏–∫–æ–≥–¥–∞ –Ω–µ –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è
    );

    render(<Autocomplete />);

    const input = screen.getByTestId('autocomplete-input');

    // –ü–µ—Ä–≤—ã–π –ø–æ–∏—Å–∫
    fireEvent.change(input, { target: { value: 'test1' } });
    act(() => {
      jest.advanceTimersByTime(300);
    });

    // –í—Ç–æ—Ä–æ–π –ø–æ–∏—Å–∫ –¥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–µ—Ä–≤–æ–≥–æ
    fireEvent.change(input, { target: { value: 'test2' } });
    act(() => {
      jest.advanceTimersByTime(300);
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ abort –±—ã–ª –≤—ã–∑–≤–∞–Ω
    expect(abortSpy).toHaveBeenCalled();
  });

  it('–ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç API', async () => {
    const emptyResponse = {
      sites: [],
      countries: [],
      regions: [],
      locations: [],
      errors: { countries: null, regions: null, locations: null },
    };

    mockFetch.mockResolvedValueOnce({
      ok: true,
      json: async () => emptyResponse,
    } as Response);

    render(<Autocomplete />);

    const input = screen.getByTestId('autocomplete-input');
    fireEvent.change(input, { target: { value: 'test' } });

    act(() => {
      jest.advanceTimersByTime(300);
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–ø–∏—Å–æ–∫ –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è
    await waitFor(() => {
      expect(screen.queryByTestId('autocomplete-list')).not.toBeInTheDocument();
    });
  });

  it('–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ä–∞–∑–Ω—ã–µ —è–∑—ã–∫–∏', async () => {
    mockFetch.mockResolvedValueOnce({
      ok: true,
      json: async () => mockApiResponse,
    } as Response);

    render(<Autocomplete language="en" />);

    const input = screen.getByTestId('autocomplete-input');
    fireEvent.change(input, { target: { value: 'test' } });

    act(() => {
      jest.advanceTimersByTime(300);
    });

    await waitFor(() => {
      expect(mockFetch).toHaveBeenCalledWith(
        expect.stringContaining('/api/places?q=test&lang=en'),
        expect.any(Object),
      );
    });
  });

  it('–ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç disabled —Å–æ—Å—Ç–æ—è–Ω–∏–µ', () => {
    render(<Autocomplete disabled={true} />);

    const input = screen.getByTestId('autocomplete-input');
    expect(input).toBeDisabled();

    // –ü–æ–ø—ã—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–µ –¥–æ–ª–∂–Ω–∞ —Ä–∞–±–æ—Ç–∞—Ç—å
    fireEvent.change(input, { target: { value: 'test' } });
    expect(mockFetch).not.toHaveBeenCalled();
  });

  it('–ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç loading —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑ –ø—Ä–æ–ø—Å–æ–≤', () => {
    render(<Autocomplete loading={true} />);

    expect(screen.getByTestId('autocomplete-loading')).toBeInTheDocument();
    expect(screen.queryByTestId('autocomplete-clear-button')).not.toBeInTheDocument();
  });
});
